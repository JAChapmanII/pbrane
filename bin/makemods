#!/bin/bash

OUTF="$1"

:> mincs
:> mods
:> mfuncs

echo -e "void modules::defineModules() {" >> mods

echo -e "template<typename Context>" >> mfuncs
echo -e "void modules::setupFunctions(Context *context) {" >> mfuncs
echo -e "\tstd::cerr << \"discovered functions: \" << std::endl;" >> mfuncs;

for f in modules/*.hpp; do
	module=$(grep '^// #m: ' "$f" | cut -d':' -f2-)
	mname=$(echo $(echo $module | cut -d':' -f1))
	mdesc=$(echo $(echo $module | cut -d':' -f2))

	echo ""
	echo "============== $mname: $mdesc"

	echo -e "#include \"$(basename "$f")\"" >> mincs
	# save the module definition data to a file
	echo -e "\tModule $mname = { \"$mname\", \"$mdesc\", false };" >> mods
	echo -e "\tmodules::modules.push_back($mname);" >> mods

	# add module function header to file
	echo -e "" >> mfuncs;
	echo -e "\t// functions from $mname" >> mfuncs
	echo -e "\tstd::cerr <<  \"    [$mname]: \";" >> mfuncs
	grep '^// #f: ' "$f" | cut -d':' -f2- | while read -r function; do
		fname=$(echo $(echo $function | cut -d':' -f1))
		pfname="$fname"
		if [[ -n $(echo $fname | grep '=') ]]; then
			pfname=$(echo $(echo $fname | cut -d'=' -f2))
			fname=$(echo $(echo $fname | cut -d'=' -f1))
		fi
		fdesc=$(echo $(echo $function | cut -d':' -f2))
		printf "%14s: %s\n" "$pfname" "$fdesc"

		# save the function information to a file
		echo -e "\tstd::cerr << \"$pfname \";" >> mfuncs;
		echo -e "\tmodules::hfmap[\"$pfname\"] = modules::make_wrapper(context, $fname);" >> mfuncs
		echo -e "\tcontext->vars.set(\"${pfname}\", \"{ hard coded }\");" >> mfuncs
		echo -e "\tcontext->vars.set(\"${pfname}.help\", \"$fdesc\");" >> mfuncs
		# TODO: setup permissions?
	done
	echo -e "\tstd::cerr << std::endl;" >> mfuncs
done
echo -e "\tstd::cerr << std::endl;" >> mfuncs

echo "}" | tee -a mods mfuncs >/dev/null

{
	cat mincs
	echo ""
	cat mods
	echo ""
	cat mfuncs
} > $OUTF

rm mincs mods mfuncs

